#  left=0
#  for right in range(len(s)):
#        #expand window
#       While constraint not met:
 #           #shrink from left
#          left +=1

# Generally used for findin max,min,sum,length 
#------------------------------------------------

#two pointer
# left, right =0, len(arr) - 1
# while left < right:
        # do something with arr[left] + arr[right]
        # move pointers accordingly 

# generally used for sorted array or needs pair checking
# General problems include pair problems, Removing Duplicates in-place, reversing or merging array

def window_sums(nums, k):
    result =[]
    window_sum = sum(nums[:k])
    result.append(window_sum)

    for i in range(k, len(nums)):
        window_sum += nums[i] - nums[i-k]
        result.append(window_sum)

    return result

nums = [1, 3, 2, 6, -1, 4, 1, 8, 2]
k = 3
print(window_sums(nums,k))
